/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_mobile_23rdnov.test_23rdnov.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_mobile_23rdnov.test_23rdnov.*;


/**
 * ServiceImpl object for domain model class Table5.
 * @see com.test_mobile_23rdnov.test_23rdnov.Table5
 */
@Service("Test_23rdNov.Table5Service")
public class Table5ServiceImpl implements Table5Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table5ServiceImpl.class);

    @Autowired
    @Qualifier("Test_23rdNov.Table5Dao")
    private WMGenericDao<Table5, Table5Id> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Table5, Table5Id> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Test_23rdNovTransactionManager")
     public Page<Table5> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Test_23rdNovTransactionManager")
    @Override
    public Table5 create(Table5 table5) {
        LOGGER.debug("Creating a new table5 with information: {}" , table5);
        return this.wmGenericDao.create(table5);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Test_23rdNovTransactionManager")
    @Override
    public Table5 delete(Table5Id table5Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table5 with id: {}" , table5Id);
        Table5 deleted = this.wmGenericDao.findById(table5Id);
        if (deleted == null) {
            LOGGER.debug("No table5 found with id: {}" , table5Id);
            throw new EntityNotFoundException(String.valueOf(table5Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Test_23rdNovTransactionManager")
    @Override
    public Page<Table5> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table5s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Test_23rdNovTransactionManager")
    @Override
    public Page<Table5> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table5s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Test_23rdNovTransactionManager")
    @Override
    public Table5 findById(Table5Id id) throws EntityNotFoundException {
        LOGGER.debug("Finding table5 by id: {}" , id);
        Table5 table5=this.wmGenericDao.findById(id);
        if(table5==null){
            LOGGER.debug("No table5 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table5;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Test_23rdNovTransactionManager")
    @Override
    public Table5 update(Table5 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table5 with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Table5Id)updated.getId());
    }

    @Transactional(readOnly = true, value = "Test_23rdNovTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


