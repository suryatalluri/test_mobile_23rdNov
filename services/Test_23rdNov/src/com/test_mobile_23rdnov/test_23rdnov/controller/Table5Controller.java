/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_mobile_23rdnov.test_23rdnov.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_mobile_23rdnov.test_23rdnov.service.Table5Service;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.test_mobile_23rdnov.test_23rdnov.*;
import com.test_mobile_23rdnov.test_23rdnov.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table5.
 * @see com.test_mobile_23rdnov.test_23rdnov.Table5
 */
@RestController(value = "Test_23rdNov.Table5Controller")
@RequestMapping("/Test_23rdNov/Table5")
@Api(description = "Exposes APIs to work with Table5 resource.", value = "Table5Controller")
public class Table5Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table5Controller.class);

    @Autowired
    @Qualifier("Test_23rdNov.Table5Service")
    private Table5Service table5Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table5 instances matching the search criteria.")
    public Page<Table5> findTable5s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table5s list");
        return table5Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table5 instances.")
    public Page<Table5> getTable5s(Pageable pageable) {
        LOGGER.debug("Rendering Table5s list");
        return table5Service.findAll(pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table5 instance associated with the given composite-id.")
    public Table5 getTable5(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table5Id temp = new Table5Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Getting Table5 with id: {}", temp);
        Table5 instance = table5Service.findById(temp);
        LOGGER.debug("Table5 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table5 instance associated with the given composite-id.")
    public boolean deleteTable5(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table5Id temp = new Table5Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Deleting Table5 with id: {}", temp);
        Table5 deleted = table5Service.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table5 instance associated with the given composite-id.")
    public Table5 editTable5(@RequestParam("column2") String column2, @RequestParam("id") Integer id, @RequestBody Table5 instance) throws EntityNotFoundException {
        Table5Id temp = new Table5Id();
        temp.setColumn2(column2);
        temp.setId(id);
        table5Service.delete(temp);
        instance = table5Service.create(instance);
        LOGGER.debug("Table5 details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Table5 instance.")
    public Table5 createTable5(@RequestBody Table5 instance) {
        LOGGER.debug("Create Table5 with information: {}", instance);
        instance = table5Service.create(instance);
        LOGGER.debug("Created Table5 with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable5Service(Table5Service service) {
        this.table5Service = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table5 instances.")
    public Long countAllTable5s() {
        LOGGER.debug("counting Table5s");
        Long count = table5Service.countAll();
        return count;
    }
}
